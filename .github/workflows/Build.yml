name: Build

on:
  push:
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/**.yml'
  pull_request:
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/**.yml'

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    name: ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        toolchain:
          - linux-clang
          - windows-clang

        configuration:
          - Debug

        include:
          - toolchain: linux-clang
            os: ubuntu-latest
            cc: clang-12
            ccx: clang++-12

          - toolchain: windows-clang
            os: windows-latest
            cc: clang-12
            ccx: clang++-12
      

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake (${{ matrix.configuration }})
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_APPS=FALSE
      env:
       CC:   ${{ matrix.cc }}
       CXX:  ${{ matrix.ccx }}

    - name: Build ${{ matrix.compiler }}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.configuration }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #run: ctest -C ${{env.BUILD_TYPE}}
      run: ./bin/tests/Tests.exe

